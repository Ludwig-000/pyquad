# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class Circle:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def r(self) -> builtins.float: ...
    @r.setter
    def r(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float, r:builtins.float) -> Circle: ...
    def __repr__(self) -> builtins.str: ...

class Color:
    @property
    def r(self) -> builtins.float: ...
    @r.setter
    def r(self, value: builtins.float) -> None: ...
    @property
    def g(self) -> builtins.float: ...
    @g.setter
    def g(self, value: builtins.float) -> None: ...
    @property
    def b(self) -> builtins.float: ...
    @b.setter
    def b(self, value: builtins.float) -> None: ...
    @property
    def a(self) -> builtins.float: ...
    @a.setter
    def a(self, value: builtins.float) -> None: ...
    def __new__(cls, r:builtins.float, g:builtins.float, b:builtins.float, a:builtins.float) -> Color: ...
    def __repr__(self) -> builtins.str: ...

class Config:
    @property
    def window_title(self) -> builtins.str: ...
    @window_title.setter
    def window_title(self, value: builtins.str) -> None: ...
    @property
    def window_width(self) -> builtins.int: ...
    @window_width.setter
    def window_width(self, value: builtins.int) -> None: ...
    @property
    def window_height(self) -> builtins.int: ...
    @window_height.setter
    def window_height(self, value: builtins.int) -> None: ...
    @property
    def fullscreen(self) -> builtins.bool: ...
    @fullscreen.setter
    def fullscreen(self, value: builtins.bool) -> None: ...
    @property
    def vsync(self) -> builtins.bool: ...
    @vsync.setter
    def vsync(self, value: builtins.bool) -> None: ...
    @property
    def sample_count(self) -> builtins.int: ...
    @sample_count.setter
    def sample_count(self, value: builtins.int) -> None: ...
    @property
    def window_resizable(self) -> builtins.bool: ...
    @window_resizable.setter
    def window_resizable(self, value: builtins.bool) -> None: ...
    @property
    def stop_pyton_when_closing_window(self) -> builtins.bool: ...
    @stop_pyton_when_closing_window.setter
    def stop_pyton_when_closing_window(self, value: builtins.bool) -> None: ...
    def __new__(cls, window_title:builtins.str, window_width:builtins.int, window_height:builtins.int, fullscreen:builtins.bool, vsync:builtins.bool, sample_count:builtins.int, window_resizable:builtins.bool, stop_pyton_when_closing_window:builtins.bool) -> Config: ...
    def __repr__(self) -> builtins.str: ...

class DMat2:
    @property
    def x_axis(self) -> DVec2: ...
    @x_axis.setter
    def x_axis(self, value: DVec2) -> None: ...
    @property
    def y_axis(self) -> DVec2: ...
    @y_axis.setter
    def y_axis(self, value: DVec2) -> None: ...
    def __new__(cls, x_axis:DVec2, y_axis:DVec2) -> DMat2: ...
    def __repr__(self) -> builtins.str: ...

class DMat3:
    @property
    def x_axis(self) -> DVec3: ...
    @x_axis.setter
    def x_axis(self, value: DVec3) -> None: ...
    @property
    def y_axis(self) -> DVec3: ...
    @y_axis.setter
    def y_axis(self, value: DVec3) -> None: ...
    @property
    def z_axis(self) -> DVec3: ...
    @z_axis.setter
    def z_axis(self, value: DVec3) -> None: ...
    def __new__(cls, x_axis:DVec3, y_axis:DVec3, z_axis:DVec3) -> DMat3: ...
    def __repr__(self) -> builtins.str: ...

class DMat4:
    @property
    def x_axis(self) -> DVec4: ...
    @x_axis.setter
    def x_axis(self, value: DVec4) -> None: ...
    @property
    def y_axis(self) -> DVec4: ...
    @y_axis.setter
    def y_axis(self, value: DVec4) -> None: ...
    @property
    def z_axis(self) -> DVec4: ...
    @z_axis.setter
    def z_axis(self, value: DVec4) -> None: ...
    @property
    def w_axis(self) -> DVec4: ...
    @w_axis.setter
    def w_axis(self, value: DVec4) -> None: ...
    def __new__(cls, x_axis:DVec4, y_axis:DVec4, z_axis:DVec4, w_axis:DVec4) -> DMat4: ...
    def __repr__(self) -> builtins.str: ...

class DVec2:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float) -> DVec2: ...
    def __repr__(self) -> builtins.str: ...

class DVec3:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def z(self) -> builtins.float: ...
    @z.setter
    def z(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float, z:builtins.float) -> DVec3: ...
    def __repr__(self) -> builtins.str: ...

class DVec4:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def z(self) -> builtins.float: ...
    @z.setter
    def z(self, value: builtins.float) -> None: ...
    @property
    def w(self) -> builtins.float: ...
    @w.setter
    def w(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float, z:builtins.float, w:builtins.float) -> DVec4: ...
    def __repr__(self) -> builtins.str: ...

class Image:
    r"""
    Image, data stored in CPU memory
    """
    @property
    def bytes(self) -> builtins.list[builtins.int]: ...
    @bytes.setter
    def bytes(self, value: builtins.list[builtins.int]) -> None: ...
    @property
    def width(self) -> builtins.int: ...
    @width.setter
    def width(self, value: builtins.int) -> None: ...
    @property
    def height(self) -> builtins.int: ...
    @height.setter
    def height(self, value: builtins.int) -> None: ...
    def __new__(cls, bytes:typing.Sequence[builtins.int], width:builtins.int, height:builtins.int) -> Image: ...
    @staticmethod
    def empty() -> Image: ...
    @staticmethod
    def gen_image_color(width:builtins.int, height:builtins.int, color:Color) -> Image:
        r"""
        Creates an Image filled with the provided [Color].
        """
    def update(self, colors:typing.Sequence[Color]) -> None:
        r"""
        Updates this image from a slice of [Color]s.
        """
    def get_image_data(self) -> builtins.list[builtins.list[builtins.int]]:
        r"""
        Returns this image's data as a slice of 4-byte arrays.
        """
    def set_pixel(self, x:builtins.int, y:builtins.int, color:Color) -> None:
        r"""
        Modifies a pixel's color in this image.
        """
    def get_pixel(self, x:builtins.int, y:builtins.int) -> Color:
        r"""
        Returns a pixel [Color] from this image.
        """
    @staticmethod
    def from_file(path:builtins.str) -> Image: ...

class Image:
    @property
    def bytes(self) -> builtins.list[builtins.int]: ...
    @bytes.setter
    def bytes(self, value: builtins.list[builtins.int]) -> None: ...
    @property
    def width(self) -> builtins.int: ...
    @width.setter
    def width(self, value: builtins.int) -> None: ...
    @property
    def height(self) -> builtins.int: ...
    @height.setter
    def height(self, value: builtins.int) -> None: ...
    def __new__(cls, bytes:typing.Sequence[builtins.int], width:builtins.int, height:builtins.int) -> Image: ...
    def __repr__(self) -> builtins.str: ...

class KeyCodeSet:
    @property
    def inner(self) -> builtins.set[KeyCode]: ...
    @inner.setter
    def inner(self, value: builtins.set[KeyCode]) -> None: ...

class Quat:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def z(self) -> builtins.float: ...
    @z.setter
    def z(self, value: builtins.float) -> None: ...
    @property
    def w(self) -> builtins.float: ...
    @w.setter
    def w(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float, z:builtins.float, w:builtins.float) -> Quat: ...
    def __repr__(self) -> builtins.str: ...

class Rect:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def w(self) -> builtins.float: ...
    @w.setter
    def w(self, value: builtins.float) -> None: ...
    @property
    def h(self) -> builtins.float: ...
    @h.setter
    def h(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float, w:builtins.float, h:builtins.float) -> Rect: ...
    def __repr__(self) -> builtins.str: ...

class Texture2D:
    r"""
    Texture, data stored in GPU memory
    """
    @staticmethod
    def from_image(image:Image) -> Texture2D: ...

class Vec2:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    def __new__(cls, x:builtins.float, y:builtins.float) -> Vec2: ...
    def normalize(self) -> Vec2: ...

class Vec3:
    @property
    def x(self) -> builtins.float: ...
    @x.setter
    def x(self, value: builtins.float) -> None: ...
    @property
    def y(self) -> builtins.float: ...
    @y.setter
    def y(self, value: builtins.float) -> None: ...
    @property
    def z(self) -> builtins.float: ...
    @z.setter
    def z(self, value: builtins.float) -> None: ...

class KeyCode(Enum):
    Space = ...
    Apostrophe = ...
    Comma = ...
    Minus = ...
    Period = ...
    Slash = ...
    Key0 = ...
    Key1 = ...
    Key2 = ...
    Key3 = ...
    Key4 = ...
    Key5 = ...
    Key6 = ...
    Key7 = ...
    Key8 = ...
    Key9 = ...
    Semicolon = ...
    Equal = ...
    A = ...
    B = ...
    C = ...
    D = ...
    E = ...
    F = ...
    G = ...
    H = ...
    I = ...
    J = ...
    K = ...
    L = ...
    M = ...
    N = ...
    O = ...
    P = ...
    Q = ...
    R = ...
    S = ...
    T = ...
    U = ...
    V = ...
    W = ...
    X = ...
    Y = ...
    Z = ...
    LeftBracket = ...
    Backslash = ...
    RightBracket = ...
    GraveAccent = ...
    World1 = ...
    World2 = ...
    Escape = ...
    Enter = ...
    Tab = ...
    Backspace = ...
    Insert = ...
    Delete = ...
    Right = ...
    Left = ...
    Down = ...
    Up = ...
    PageUp = ...
    PageDown = ...
    Home = ...
    End = ...
    CapsLock = ...
    ScrollLock = ...
    NumLock = ...
    PrintScreen = ...
    Pause = ...
    F1 = ...
    F2 = ...
    F3 = ...
    F4 = ...
    F5 = ...
    F6 = ...
    F7 = ...
    F8 = ...
    F9 = ...
    F10 = ...
    F11 = ...
    F12 = ...
    F13 = ...
    F14 = ...
    F15 = ...
    F16 = ...
    F17 = ...
    F18 = ...
    F19 = ...
    F20 = ...
    F21 = ...
    F22 = ...
    F23 = ...
    F24 = ...
    F25 = ...
    Kp0 = ...
    Kp1 = ...
    Kp2 = ...
    Kp3 = ...
    Kp4 = ...
    Kp5 = ...
    Kp6 = ...
    Kp7 = ...
    Kp8 = ...
    Kp9 = ...
    KpDecimal = ...
    KpDivide = ...
    KpMultiply = ...
    KpSubtract = ...
    KpAdd = ...
    KpEnter = ...
    KpEqual = ...
    LeftShift = ...
    LeftControl = ...
    LeftAlt = ...
    LeftSuper = ...
    RightShift = ...
    RightControl = ...
    RightAlt = ...
    RightSuper = ...
    Menu = ...
    Back = ...
    Unknown = ...

def clear_background(color:Color) -> None: ...

def draw_circle(x:builtins.float, y:builtins.float, r:builtins.float, color:Color) -> None: ...

def draw_cube(position:Vec3, size:Vec3, color:Color) -> None: ...

def draw_grid(slices:builtins.int, spacing:builtins.float, axes_color:Color, other_color:Color) -> None: ...

def draw_plane(center:Vec3, size:Vec2, color:Color, texture:typing.Optional[Texture2D]) -> None: ...

def draw_poly(x:builtins.float, y:builtins.float, sides:builtins.int, radius:builtins.float, rotation:builtins.float, color:Color) -> None: ...

def draw_rectangle(x:builtins.float, y:builtins.float, w:builtins.float, h:builtins.float, color:Color) -> None: ...

def draw_text(text:builtins.str, x:builtins.float, y:builtins.float, font_size:builtins.float, color:Color) -> None: ...

def draw_texture(texture:Texture2D, x:builtins.float, y:builtins.float, color:Color) -> None: ...

def get_fps() -> builtins.int: ...

def get_keys_down() -> KeyCodeSet: ...

def get_keys_pressed() -> KeyCodeSet: ...

def get_keys_released() -> KeyCodeSet: ...

def next_frame() -> None: ...

